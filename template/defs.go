package template

const (
	genBase = `
// Package {{.PackageName}} Code generated by kratosgormctl_bak. DO NOT EDIT!
package {{.PackageName}}

import (
    "gorm.io/gorm"
    "time"
    "context"
)

type (
    {{.InnerInterfaceName}} interface {
        Insert(ctx context.Context, data *{{.BizStructName}}) error
		FindAfterInsert(ctx context.Context, data *{{.BizStructName}}) (*{{.BizStructName}}, error)
        FindOne(ctx context.Context, id int64, columns ...string) (*{{.BizStructName}}, error)
        Update(ctx context.Context, data *{{.BizStructName}}, columns ...string) error
		FindAfterUpdate(ctx context.Context, data *{{.BizStructName}}, columns ...string) (*{{.BizStructName}}, error)
		Delete(ctx context.Context, data *{{.BizStructName}}) error
    }

    {{.DefaultModelName}} struct {
        *gorm.DB
    }
)

func new{{.OuterInterfaceName}}(conn *gorm.DB) *{{.DefaultModelName}} {
	return &{{.DefaultModelName}}{
		conn,
	}
}

func (m *{{.DefaultModelName}}) Insert(ctx context.Context, data *{{.BizStructName}}) error {
	entityData := new({{.EntityStructName}})
	entityData.FromBizStruct(data)
    err := m.WithContext(ctx).Model(&{{.EntityStructName}}{}).Create(entityData).Error
    if err != nil {
        return err
    }

    return nil
}

func (m *{{.DefaultModelName}}) FindAfterInsert(ctx context.Context, data *{{.BizStructName}}) (*{{.BizStructName}}, error) {
	err := m.Insert(ctx, data)
	if err != nil {
		return nil, err
	}

	entityData := new({{.EntityStructName}})
	entityData.FromBizStruct(data)
	result, err := m.FindOne(ctx, int64(entityData.ID))
	if err != nil {
		return nil, err
	}

	return result, nil
}

func (m *{{.DefaultModelName}}) FindOne(ctx context.Context, id int64, columns ...string) (*{{.BizStructName}}, error) {
    var data {{.EntityStructName}}
	var err error
	if len(columns) > 0 {
    	err = m.WithContext(ctx).Model(&{{.EntityStructName}}{}).Select(columns).First(&data, id).Error
	} else {
		err = m.WithContext(ctx).Model(&{{.EntityStructName}}{}).First(&data, id).Error
	}
    if err != nil {
        return nil, err
    }

    return (&data).ToBizStruct(), nil
}

func (m *{{.DefaultModelName}}) Update(ctx context.Context, data *{{.BizStructName}}, columns ...string) error {
    if data == nil {
        return nil
    }

	entityData := new({{.EntityStructName}})
	entityData.FromBizStruct(data)
	
	var err error
	if len(columns) > 0 {
		err = m.WithContext(ctx).Model(&{{.EntityStructName}}{}).Select(columns).Where("id = ?", entityData.ID).Updates(entityData).Error
	} else{
		err = m.WithContext(ctx).Model(&{{.EntityStructName}}{}).Where("id = ?", entityData.ID).Updates(entityData).Error
	}

    if err != nil {
        return err
    }

    return nil
}

func (m *{{.DefaultModelName}}) FindAfterUpdate(ctx context.Context, data *{{.BizStructName}}, columns ...string) (*{{.BizStructName}}, error) {
	err := m.Update(ctx, data, columns...)
	if err != nil {
		return nil, err
	}

	entityData := new({{.EntityStructName}})
	entityData.FromBizStruct(data)
	result, err := m.FindOne(ctx, int64(entityData.ID))
	if err != nil {
		return nil, err
	}

	return result, nil
}

func (m *{{.DefaultModelName}}) Delete(ctx context.Context, data *{{.BizStructName}}) error {
	entityData := new({{.EntityStructName}})
	entityData.FromBizStruct(data)
	err := m.WithContext(ctx).Delete(entityData).Error
    
    return err
}
`

	genCustom = `package {{.PackageName}}

import (
    "gorm.io/gorm"
)

var _ {{.OuterInterfaceName}} = (*custom{{.OuterInterfaceName}})(nil)

type (
    // {{.OuterInterfaceName}} is an interface to be customized, add more methods here,
    // and implement the added methods in custom{{.OuterInterfaceName}}.
    {{.OuterInterfaceName}} interface {
        {{.InnerInterfaceName}}
    }

    custom{{.OuterInterfaceName}} struct {
        *{{.DefaultModelName}}
    }
)

// New{{.OuterInterfaceName}} returns a model for the database table.
func New{{.OuterInterfaceName}}(conn *gorm.DB) {{.OuterInterfaceName}} {
	return &custom{{.OuterInterfaceName}}{
		default{{.OuterInterfaceName}}: new{{.OuterInterfaceName}}(conn),
	}
}
`
)

type (
	GenBaseStruct struct {
		PackageName        string
		InnerInterfaceName string
		OuterInterfaceName string
		DefaultModelName   string
		BizStructName      string
		EntityStructName   string
		TableName          string
	}
)
